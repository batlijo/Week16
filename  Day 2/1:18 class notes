Thursday Jan 18 class
unit testing:
- test function by function
  - you test a single unit
  - functional test, tests all the variables together

nightmare.js: behavior driven testing...mimicking the browser

-user stories are used in project management

  WHAT ARE USER STORIES ??? what does the code look like

  nightmare is to generate browser and you can use it in conjunction with mocha for unit testing

  require("chai") = THIS IS TO USE MOCHA

  so tests will show you what an app would look like and if there are errors it will tell you in english what is wrong and what it's supposed to do.

for project 2 im doing mysql and sequelize stuff

sequelize notes:

SETTING UP A CONNECTION
const Sequelize = require('sequelize');
const sequelize = new Sequelize('database', 'username', 'password', {
  host: 'localhost',
  dialect: 'mysql'|'sqlite'|'postgres'|'mssql',

  pool: {
    max: 5,
    min: 0,
    acquire: 30000,
    idle: 10000
  },

  // SQLite only
  storage: 'path/to/database.sqlite'
});

// Or you can simply use a connection uri
const sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname');



TEST THE CONNECTION
sequelize
  .authenticate()
  .then(() => {
    console.log('Connection has been established successfully.');
  })
  .catch(err => {
    console.error('Unable to connect to the database:', err);
  });

YOUR FIRST MODEL
const User = sequelize.define('user', {
  firstName: {
    type: Sequelize.STRING
  },
  lastName: {
    type: Sequelize.STRING
  }
});

// force: true will drop the table if it already exists
User.sync({force: true}).then(() => {
  // Table created
  return User.create({
    firstName: 'John',
    lastName: 'Hancock'
  });
});

YOUR FIRST QUERY
User.findAll().then(users => {
  console.log(users)
})

APPLICATION WIDE MODEL OPTIONS
const sequelize = new Sequelize('connectionUri', {
  define: {
    timestamps: false // true by default
  }
});

const User = sequelize.define('user', {}); // timestamps is false by default
const Post = sequelize.define('post', {}, {
  timestamps: true // timestamps will now be true
});

PROMISES
User.findOne().then(user => {
  console.log(user.get('firstName'));
});
